#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct zqd {
	int mess;
	struct zqd *left, *right;
} tree;

void add(int message, tree ** next) {
	tree * temp = (tree*)malloc(sizeof(tree));
	*next = temp;
	(*next)->mess = message;
	(*next)->left = (*next)->right = NULL;
}
void print(tree * head) {
	if (head->left != NULL) {
		print(head->left);
		printf("%d ", head->left->mess);
	}
	if (head->right != NULL){
		print(head->right);
		printf("%d ", head->right->mess);
	}
	//printf("%d ", head->mess);
}
tree ** pop(tree *** stack, int * index) {
	tree ** temp = stack[*index];
	stack[*index] = 0;
	(*index)--;
	return temp;
}

int main(int argc, char * argv[]) {
	int n;
	scanf("%d", &n);
	char kirby[6] = { 0 };
	tree *** gr;
	gr = (tree***)malloc(2 * n * sizeof(tree*));
	int index = -1;
	int message;
	tree * head = (tree*)malloc(sizeof(tree));
	scanf("%s %d", kirby, &message);
	head->mess = message;
	head->left = head->right = NULL;
	gr[++index] = &(head->right);
	gr[++index] = &(head->left);
	tree ** next = &head;
	for (int i = 1; i < 2 * n; i++) {
		scanf("%s", kirby);
		//printf("%s\n", kirby);
		if (strcmp(kirby, "Push") == 0) {
			scanf("%d", &message);
			next = pop(gr, &index);
			add(message, next);
			//if (i == 0) {
			//	head = next;
			//}
			gr[++index] = &((*next)->right);
			gr[++index] = &((*next)->left);
		}
		else {
			pop(gr, &index);
		}
	}
	print(head);
	printf("%d", head->mess);
	return 0;
}
